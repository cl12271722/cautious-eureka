统计n到m之间素数的个数

#include<stdio.h>
int main()
{
    int n, m, i, j, count, isPrime;
    count = 0;
    scanf_s("%d,%d", &n, &m);

    for (i = n;i <= m;i++)
    {
        isPrime = 1;
        for (j = 2;j <= i - 1;j++)
        {
            if (i % j == 0)
            {
                isPrime = 0;
                break;
            }
        }
        if (isPrime)
            {
                count++;
            }
        
    }
    printf("count=%d", count);
    return 0;
}




#include<stdio.h>
#include<math.h>
main()
{
	int n,i,k,l,m;
	m=0;
	
	for(n=100;n<=200;n++)
	{
		l=1;
		k=sqrt(n);
		for(i=2;i<=k;i++)
		{
			if(n%i==0)
			{
				l=0;
				break;//一旦判断不是素数，则跳出该循环，不需要再继续往下判断了 
			}
			
		}
		if(l)
		{
			m++;//计算素数的个数
	 		printf("%d ",n);
	 		if(m%5==0)
	 			printf("\n");
		 }
	}
	printf("\n");
	printf("素数的个数为%d",m); 
	
}


斐波那契数列
#include<stdio.h>
main()
{
	int F1=1,F2=0,F,i;
	int month;
	printf("请输入月数:");
	scanf("%d",&i);
	for(month=1;month<=i;month++)
	{
		F=F1+F2;
		F1=F2;
		F2=F;
		printf("%d ",F);
	
	}

}




#include <stdio.h>

int main()
{
    int F1 = 1, F2 = 1, F;  // 初始值设为1, 1，符合标准斐波那契数列
    int i;
    int month;
    
    printf("请输入月数: ");
    scanf("%d", &i);
    
    if (i >= 1) {
        printf("%d", F1);  // 直接输出第一个数
    }
    
    if (i >= 2) {
        printf(" %d", F2);  // 直接输出第二个数
    }
    
    for (month = 3; month <= i; month++) {
        F = F1 + F2;
        printf(" %d", F);  // 输出当前数，并用空格分隔
        F1 = F2;
        F2 = F;
    }
    
    printf("\n");  // 最后换行，使输出更美观
    
    return 0;  // 返回0表示程序成功结束
}


用数组求最大值（擂台法）
#include<stdio.h>
main()
{
	int i,n,max;
	int a[n];  //在devc++可以执行动态数组的问题
	printf("请输入要比较数字的数量:"); 
	scanf("%d",&n);
	printf("请输入%d个数字：",n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	max=a[0];
	for(i=1;i<n;i++)
	{
		if(max<a[i])
			max=a[i];
	}
	printf("最大数为%d",max);
}




#include<stdio.h>
main()
{
	int i,n,max;
	int a[100];  //在visual c++不可以执行动态数组的问题，故可将数组的范围定义大一点
	printf("请输入要比较数字的数量:"); 
	scanf("%d",&n);
	printf("请输入%d个数字：",n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	max=a[0];
	for(i=1;i<n;i++)
	{
		if(max<a[i])
			max=a[i];
	}
	printf("最大数为%d",max);
}

数组行列元素互换

#include<stdio.h>
#define M 2
#define N 3
int main()
{
	int a[M][N],b[N][M];
	int i,j;
	printf("请输入初始数组：");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf("%d",&a[i][j]);
		}
			
	} 
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			b[j][i]=a[i][j];
	}
	for(i=0;i<N;i++)
	{
		for(j=0;j<M;j++)
		{
			printf("%d ",b[i][j]);
			if((j+1)%2==0)
				printf("\n");
		}
	}
}




排序问题
（不管是选择法还是冒泡法，他们的外层循环都是N-1次）

1、选择排序（在所有的元素中，选出最小的，排在第一位；在余下的元素中，选出一个最小的，排到第二位；……）

#include<stdio.h>
main()
{
	int n,i,j,k,t;   //t是中间量用来交换两个元素，i、j用于两次循环体计数，而k用于记录下标 
	int a[n];
	printf("请输入要排序的元素个数：");
	scanf("%d",&n);
	printf("请输入要排序的%d个元素：",n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	for(i=0;i<n-1;i++)
	{
		k=i;   //先默认下标为i的元素是这组数据中的最小值 
		for(j=i+1;j<n;j++)
		{
			if(a[j]<a[k])   //注意此处判断条件是a[j]<a[k]，而不是a[j]<a[i],不然的话只要a[j]比a[i]小就会交换一次位置，而不是找到最小后才交换了
				k=j;      //通过一次遍历i后面的各个元素，找到了最小值的下标 
		}
		//接下来就是要将找到的最小值放到下标为i的位置上，即交换这两个元素
		t=a[k];
		a[k]=a[i];
		a[i]=t;
	}
	printf("递增排序后各元素为：");
	for(i=0;i<n;i++)
	{
		printf("%d ",a[i]);
	}
	return 0;
	
}


2、冒泡法（让最大的元素下沉到相应的位置）
#include<stdio.h>
int main()
{
	int i,j,t;
	int a[6];
	for(i=0;i<6;i++)
		scanf("%d",&a[i]);
	for(i=1;i<6;i++)
	{
		for(j=0;j<6-i;j++)
		{
			if(a[j]>a[j+1])
			{
				t=a[j];
				a[j]=a[j+1];
				a[j+1]=t;
			}
		}
	}
	printf("递增排序后各元素为：");
	for(i=0;i<6;i++)
	{
		printf("%d ",a[i]);
	}
	return 0;
	
}


求数组行元素的平均值


#include<stdio.h>
int main()
{
	float a[2][4],ave[2],sum;
	int i,j;
	printf("请输入8个元素：");
	for(i=0;i<2;i++)
	{
		for(j=0;j<4;j++)
			scanf("%f",&a[i][j]);
	}
	for(i=0;i<2;i++)
	{
		sum=0;    //每次执行内循环前都要将sum归零
		for(j=0;j<4;j++)
			sum=sum+a[i][j];
		ave[i]=sum/4;
	}
	for(i=0;i<2;i++)
		printf("第%d行的元素平均值为%.1f",i+1,ave[i]);
	return 0;
 } 


判断字符串是否是回文字符

#include<stdio.h>
#include<string.h>
int main()
{
	char str[50];
	int i,n,flag=0;
	printf("请输入一个字符串："); 
	gets(str);
	n=strlen(str); //计算字符串的长度，n/2即可找到对称轴的位置 
	for(i=0;i<n/2;i++)
	{
		if(str[i]!=str[n-1-i])
		{
			flag=1;
			break;
		}
	}
	if(flag==1)
		printf("该字符串不是回文字符！");
	else
		printf("该字符串是回文字符！"); 
	return 0;
}


字符串比大小

#include<stdio.h>
#include<string.h>
int main()
{
	char str[100],max[100];
	int i,n;
	printf("请输入字符串个数：");
	scanf("%d",&n);
	getchar();//用来接收回车键，如果没有getchar语句编译器就会默认第一个字符串已经输入了，就直接跳过第一个字符串额输入 
	printf("请输入第一个字符串：");
	gets(str);
	strcpy(max,str);
	for(i=2;i<=n;i++)
	{
		printf("请输入第%d个字符串：",i);
		gets(str);
		if(strcmp(str,max)>0)
			strcpy(max,str);
	}
	printf("最大字符串为%s\n",max);
	return 0;
}




用函数的调用求组合数


#include<stdio.h>
int fun(int n)
{
	int z=1,i;
	for(i=1;i<=n;i++)
	{
		z=z*i;
 	}
 	return z;
}

int main()
{
	int n,m,zhs;
	scanf("%d%d",&n,&m);
	while(1)
	{
		if(n<m)
		{
			printf("您输入的数据有误，请重新输入：");
			scanf("%d%d",&n,&m); 
		}
		else
			break;
	}
	zhs=fun(n)/fun(m)*fun(n-m);
	printf("组合数为%d：",zhs);
	return 0;
}




递归调用

#include<stdio.h>
long fact(int n)
{
	long int t;
	if(n==0)
		t=1;
	else
		t=fact(n-1)*n;
	return t;
}


int main()
{
	
	int n;
	printf("请输入要求阶层的数：");
	scanf("%d",&n);
	printf("%d!=%ld",n,fact(n)); 
}


汉诺塔问题（看成n=(n-1)+1,简化问题思考，将复杂问题简化分析）

#include<stdio.h>
void hanoi(int n,char A,char B,char C)
{
	if(n==1)
		printf("%c->%c\n",A,C);
	else
	{
		hanoi(n-1,A,B,C);
		printf("%c->%c\n",A,C);
		hanoi(n-1,B,A,C);
	}
}

int main()
{
	int n;
	scanf("%d",&n);
	hanoi(n,'A','B','C');
	return 0;
}


利用函数排序多个数组内的元素

#include<stdio.h>
void px(int a[],int n)
{
	int i,j,t;
	for(i=0;i<n-1;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(a[i]>a[j])
			{
				t=a[i];
				a[i]=a[j];
				a[j]=t;
				}	
		}
	}
}

int main()
{
	int i;
	int a[5]={2,4,3,1,6},b[6]={2,6,3,7,3,9};
	int size=5;
	px(a,size);
	px(b,size+1);
	printf("数组a排序后为：");
	for(i=0;i<size;i++)
		printf("%d ",a[i]);
	printf("数组b排序后为：");
	for(i=0;i<size+1;i++)
		printf("%d ",b[i]);
	return 0;		
}


利用函数实现数组行列元素互换


#include<stdio.h>
#define N 2
#define M 3
void hh(int a[N][M],int b[M][N])
{
	int i,j;
	for(i=0;i<N;i++)
		for(j=0;j<M;j++)
		{
			b[j][i]=a[i][j];
		}
}
int main()
{
	int a[N][M]={{1,2,3},{4,5,6}};
	int b[M][N];
	int i,j;
	hh(a,b);
	printf("行列元素互换之后为：");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			printf("%d ",b[i][j]);
		printf("\n");
	}
	return 0;
}
